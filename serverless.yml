# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: jo-shop-list-aws
#app: your-app-name
#tenant: your-tenant-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
    name: aws
    runtime: nodejs10.x
    stage: ${opt:stage, "dev"}
    region: eu-central-1
    memorySize: 128
    timeout: 3
    environment:
        SHOPLIST_TABLE: ${self:service}-lists-${opt:stage, self:provider.stage}
        SHOPLIST_TABLE_SECINDEX: ${self:service}-lists-si-${opt:stage, self:provider.stage}
        SHOPLIST_USERPOOL: ${self:service}-userpool-${opt:stage, self:provider.stage}
        SHOPLIST_USERPOOL_CLIENT: ${self:service}-userpool-client-${opt:stage, self:provider.stage}
        SHOPLIST_AUTHORIZER: ${self:service}-cognito-authorizer-${opt:stage, self:provider.stage}
        SHOPLIST_LIST_QUOTA: 50
        SHOPLIST_ITEM_QUOTA: 1000
        SHOPLIST_STRING_QUOTA: 1000

#  iamRoleStatements:
#    - Effect: Allow
#      Action:
#        - dynamodb:Query
#        - dynamodb:Scan
#        - dynamodb:GetItem
#        - dynamodb:PutItem
#        - dynamodb:UpdateItem
#        - dynamodb:DeleteItem
#      Resource:
#        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.SHOPLIST_TABLE}"
#        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.SHOPLIST_TABLE}/index/${self:provider.environment.SHOPLIST_TABLE_SECINDEX}"

plugins:
    - serverless-plugin-typescript
    - serverless-offline
    - serverless-iam-roles-per-function

# you can overwrite defaults here
# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
package:
    include: src/shoplist/**/*.ts
#    exclude:
#        - node_modules/**/*

functions:
    getLists:
        handler: src/shoplist/handler.getAll
        events:
            - http:
                  path: api/shoplist
                  method: get
                  cors: True
                  #                  cors:
                  #                    origin: "*"
                  #                    headers:
                  #                      - Content-Type
                  #                      - X-Amz-Date
                  #                      - Authorization
                  #                      - X-Api-Key
                  #                      - X-Amz-Security-Token
                  #                      - X-Amz-User-Agent
                  #                        allowCredentials: False
                  #                        cacheControl: 'max-age=600, s-maxage=600, proxy-revalidate'
                  authorizer:
                      type: COGNITO_USER_POOLS
                      authorizerId:
                          Ref: ApiGatewayAuthorizer
                  resp: json
        iamRoleStatements:
            - Effect: 'Allow'
              Action:
                  - dynamodb:Query
                  - dynamodb:Scan
              Resource:
                  - 'arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.SHOPLIST_TABLE}'
    #                  - 'arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.SHOPLIST_TABLE}/index/${self:provider.environment.SHOPLIST_TABLE_SECINDEX}'

    getListById:
        handler: src/shoplist/handler.getById
        events:
            - http:
                  path: api/shoplist/{id}
                  method: get
                  authorizer:
                      type: COGNITO_USER_POOLS
                      authorizerId:
                          Ref: ApiGatewayAuthorizer
                  resp: json
                  cors: true
        iamRoleStatements:
            - Effect: 'Allow'
              Action:
                  - dynamodb:GetItem
              Resource:
                  - 'arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.SHOPLIST_TABLE}'

    createList:
        handler: src/shoplist/handler.create
        events:
            - http:
                  path: api/shoplist
                  method: post
                  authorizer:
                      type: COGNITO_USER_POOLS
                      authorizerId:
                          Ref: ApiGatewayAuthorizer
                  resp: json
                  cors: true
        iamRoleStatements:
            - Effect: 'Allow'
              Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:Scan
                  - dynamodb:Query
              Resource:
                  - 'arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.SHOPLIST_TABLE}'
    #                  - 'arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.SHOPLIST_TABLE}/index/${self:provider.environment.SHOPLIST_TABLE_SECINDEX}'

    updateList:
        handler: src/shoplist/handler.update
        events:
            - http:
                  path: api/shoplist/{id}
                  method: put
                  authorizer:
                      type: COGNITO_USER_POOLS
                      authorizerId:
                          Ref: ApiGatewayAuthorizer
                  resp: json
                  cors: true
        iamRoleStatements:
            - Effect: 'Allow'
              Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:Scan
                  - dynamodb:Query
              Resource:
                  - 'arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.SHOPLIST_TABLE}'
    #                  - 'arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.SHOPLIST_TABLE}/index/${self:provider.environment.SHOPLIST_TABLE_SECINDEX}'

    deleteList:
        handler: src/shoplist/handler.remove
        events:
            - http:
                  path: api/shoplist/{id}
                  method: delete
                  authorizer:
                      type: COGNITO_USER_POOLS
                      authorizerId:
                          Ref: ApiGatewayAuthorizer
                  resp: json
                  cors: true
        iamRoleStatements:
            - Effect: 'Allow'
              Action:
                  - dynamodb:DeleteItem
                  - dynamodb:GetItem
                  - dynamodb:Query
              Resource:
                  - 'arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.SHOPLIST_TABLE}'
#                  - 'arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.SHOPLIST_TABLE}/index/${self:provider.environment.SHOPLIST_TABLE_SECINDEX}'

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
resources:
    Resources:
        ShoppingListDynamoDbTable:
            Type: 'AWS::DynamoDB::Table'
            DeletionPolicy: Retain
            Properties:
                AttributeDefinitions:
                    - AttributeName: userId
                      AttributeType: S
                    - AttributeName: id
                      AttributeType: S
                KeySchema:
                    - AttributeName: userId
                      KeyType: HASH
                    - AttributeName: id
                      KeyType: RANGE
                ProvisionedThroughput:
                    ReadCapacityUnits: 1
                    WriteCapacityUnits: 1
                TableName: ${self:provider.environment.SHOPLIST_TABLE}
        #                GlobalSecondaryIndexes:
        #                    - IndexName: ${self:provider.environment.SHOPLIST_TABLE_SECINDEX}
        #                      KeySchema:
        #                          - AttributeName: userId
        #                            KeyType: HASH
        #                          - AttributeName: issuedAt
        #                            KeyType: RANGE
        #                      Projection:
        #                          ProjectionType: KEYS_ONLY
        #                      ProvisionedThroughput:
        #                          ReadCapacityUnits: 1
        #                          WriteCapacityUnits: 1

        CognitoUserPool:
            Type: 'AWS::Cognito::UserPool'
            Properties:
                MfaConfiguration: OFF
                UserPoolName: ${self:provider.environment.SHOPLIST_USERPOOL}
                UsernameAttributes:
                    - email
                Policies:
                    PasswordPolicy:
                        MinimumLength: 8
                        RequireLowercase: True
                        RequireNumbers: True
                        RequireSymbols: False
                        RequireUppercase: True

        CognitoUserPoolClient:
            Type: 'AWS::Cognito::UserPoolClient'
            Properties:
                ClientName: ${self:provider.environment.SHOPLIST_USERPOOL_CLIENT}
                GenerateSecret: False
                UserPoolId:
                    Ref: CognitoUserPool

        ApiGatewayAuthorizer:
            DependsOn:
                - ApiGatewayRestApi
            Type: AWS::ApiGateway::Authorizer
            Properties:
                Name: ${self:provider.environment.SHOPLIST_AUTHORIZER}
                IdentitySource: method.request.header.Authorization
                RestApiId:
                    Ref: ApiGatewayRestApi
                Type: COGNITO_USER_POOLS
                ProviderARNs:
                    - Fn::GetAtt: [CognitoUserPool, Arn]

    Outputs:
        CognitoUserPoolArn:
            Value:
                Fn::GetAtt:
                    - CognitoUserPool
                    - Arn
            Export:
                Name: CognitoUserPoolArn-${opt:stage, self:provider.stage}
